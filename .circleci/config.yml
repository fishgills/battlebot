version: 2.1
orbs:
  aws-ecr: circleci/aws-ecr@7.3.0
  aws-ecs: circleci/aws-ecs@2.2.1
  aws-cli: circleci/aws-cli@2.0.6

parameters:
  # This parameter is used to trigger the main workflow
  trigger:
    type: boolean
    default: true

  # A parameter per package
  backend:
    type: boolean
    default: false
  bot:
    type: boolean
    default: false
  www:
    type: boolean
    default: false

executors:
  node:
    resource_class: small
    docker:
      - image: circleci/node

jobs:
  ng-build:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout:
          path: ~/project
      - run:
          command: ls -al
      - restore_cache:
          key: v1-deps-{{ checksum "yarn.lock" }}
      - run:
          command: yarn install
          name: install deps
      - save_cache:
          paths:
            - node_modules
          key: v1-deps-{{ checksum "yarn.lock"}}
      - run:
          working_directory: ~/project/packages/www
          command: yarn build
          name: build
      - persist_to_workspace:
          root: ~/project/packages/www/dist
          paths:
            - 'www'
  copy-to-s3:
    executor: aws-cli/default
    steps:
      - aws-cli/setup
      - attach_workspace:
          at: .
      - run:
          command: aws s3 sync www s3://battlebot-www/www
      - run:
          command: aws cloudfront create-invalidation --distribution-id E3PRHB9KRJWJWA --paths "/*"

  trigger-workflows:
    docker:
      - image: cimg/base:stable
    resource_class: small
    steps:
      - checkout
      - run:
          # This step is added to demonstrate the possibility to dynamically set the user token
          name: Set token
          command: echo "export CIRCLE_USER_TOKEN=${CIRCLE_TOKEN}" >> $BASH_ENV
      - run:
          name: Trigger workflows
          command: chmod +x .circleci/monorepo.sh && .circleci/monorepo.sh
          # environment:
          # (optional) print additional debug information
          # MONOREPO_DEBUG: 'true'
          # (optional) additional CI parameters to include in the pipeline (must be a valid JSON)
          # CI_PARAMETERS: '{ "deploy": true }'
  build:
    parameters:
      package_name:
        type: string
    machine:
      image: ubuntu-2004:202010-01 # recommended linux image
    working_directory: ~/project/packages/<< parameters.package_name >>

    steps:
      - checkout:
          path: ~/project
      - aws-ecr/build-and-push-image:
          repo: '<< parameters.package_name >>'
          remote-docker-layer-caching: true
          checkout: false
          extra-build-args: --build-arg SHA1=${CIRCLE_SHA1}
          create-repo: true
          tag: 'latest'
          # tag: '${CIRCLE_SHA1},$(echo $CIRCLE_BRANCH | sed -e "s/[^a-zA-Z]/\-/g")'

  deploy:
    parameters:
      package_name:
        type: string
    machine:
      image: ubuntu-2004:202010-01 # recommended linux image
    working_directory: ~/project/packages/<< parameters.package_name >>
    steps:
      - checkout:
          path: ~/project
      - aws-ecs/update-service:
          family: 'task-<< parameters.package_name >>'
          cluster-name: 'cluster-mediator'
          service-name: 'service-<< parameters.package_name >>'
          container-image-name-updates: 'container=container-<< parameters.package_name >>,tag=latest'
          container-env-var-updates: 'container=container-<< parameters.package_name >>,name=DD_VERSION,value=${CIRCLE_SHA1}'

workflows:
  version: 2

  # The main workflow responsible for triggering all other workflows
  # in which changes are detected.
  ci:
    when: << pipeline.parameters.trigger >>
    jobs:
      - trigger-workflows

  # Workflows defined for each package.

  www:
    when: << pipeline.parameters.www >>
    jobs:
      - ng-build
      - copy-to-s3:
          filters:
            branches:
              only:
                - master
          context: EnvVariables
          requires:
            - ng-build

  backend:
    when: << pipeline.parameters.backend >>
    jobs:
      - build:
          name: backend-build
          package_name: backend
          context: EnvVariables
      - deploy:
          filters:
            branches:
              only:
                - master
          name: backend-deploy
          context: EnvVariables
          package_name: backend
          requires:
            - backend-build

  bot:
    when: << pipeline.parameters.bot >>
    jobs:
      - build:
          name: bot-build
          package_name: bot
          context: EnvVariables
      - deploy:
          filters:
            branches:
              only:
                - master
          name: bot-deploy
          context: EnvVariables
          package_name: bot
          requires:
            - bot-build
