# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type CharacterType {
  id: String!
  name: String!
  created_at: DateTime!
  updated_at: DateTime!
  owner: String!
  attacking: [CombatModel!]
  defending: [CombatModel!]
  strength: Float!
  defense: Float!
  vitality: Float!
  level: Float!
  xp: Float!
  hp: Float!
  rolls: Float!
  gold: Float!
  teamId: String!
  extraPoints: Float!
  active: Boolean!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type WhoGoesFirst {
  roll: Float!
  modifier: Float!
}

type CombatRound {
  attacker: CharacterType!
  defender: CharacterType!
  hit: Boolean!
  damage: Float
  attackRoll: Float!
  attackBonus: Float!
  defenderDefense: Float!
  defenderHealth: Float!
}

type CombatLog {
  combat: [CombatRound!]!
}

type CombatModel {
  id: String!
  attacker: CharacterType
  attackerId: String!
  defender: CharacterType
  defenderId: String!
  log: CombatLog!
  created_at: DateTime!
  updated_at: DateTime!
  winner: CharacterType!
  loser: CharacterType!
  rewardGold: Float!
}

type SlackInstallModel {
  id: String!
  team_id: String!
  installObj: JSON!
  channelId: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type RewardType {
  id: String!
  to: String!
  from: String!
  value: Float!
  created_at: DateTime!
  updated_at: DateTime!
  teamId: String!
}

type RewardScore {
  teamId: String!
  userId: String!
  count: Float!
}

type Query {
  characters: [CharacterType!]!
  findByOwner(owner: String!, teamId: String): CharacterType!
  combats(attacker: String): [CombatModel!]!
  installs: [SlackInstallModel!]!
  install(team_id: String!): SlackInstallModel!
  rewards: [RewardType!]!
  rewardsGivenToday(user: String!, teamId: String!): Int!
  getUserScore(teamId: String!, userId: String!, listType: String = "from"): [RewardType!]!
  ScoreBoard(input: RewardsScoreBoardInput!): [RewardScore!]!
}

input RewardsScoreBoardInput {
  direction: AllowedDirections!
  teamId: String!
  today: Boolean = true
}

"""Supported scoreboard directions"""
enum AllowedDirections {
  """rewards from users"""
  FROM

  """rewards to users"""
  TO
}

type Mutation {
  CharacterUpdate(id: String!, input: UpdateCharacterInput!): Int!
  reroll(id: String!): CharacterType!
  createCharacter(input: CreateCharacterInput!): CharacterType!
  createCombat(input: CreateCombatInput!): CombatModel!
  start(input: CreateCombatInput!): CombatModel!
  createInstall(input: CreateSlackInstallInput!): SlackInstallModel!
  updateInstall(input: UpdateSlackInstallInput!): SlackInstallModel!
  removeInstall(team_id: String!): String!
  giveReward(input: CreateRewardInput!): Boolean!
}

"""Update a character's properties"""
input UpdateCharacterInput {
  strength: Float
  vitality: Float
  defense: Float
  extraPoints: Float
  active: Boolean
}

input CreateCharacterInput {
  name: String!
  owner: String!
  teamId: String!
}

input CreateCombatInput {
  attackerId: String!
  defenderId: String!
}

input CreateSlackInstallInput {
  team_id: String!
  installObj: JSON!
  channelId: String
}

input UpdateSlackInstallInput {
  team_id: String
  installObj: JSON
  channelId: String
  id: String!
}

input CreateRewardInput {
  from: String!
  to: String!
  value: Float
  teamId: String!
}
